package no.tornado.keyboard.models

import javafx.util.StringConverter

enum class KeyCodeGroup {
    Other,
    Puncuation,
    ShiftedPunctuation,
    Digits,
    Spacing,
    System,
    Mouse,
    Numpad,
    Navigation,
    Modifiers,
    Media,
    LayerSwitching,
    FnKeys,
    DualFunctionKeys,
    Letters
}

enum class KeyCode(val description: String, val group: KeyCodeGroup = KeyCodeGroup.Other, val isCommand: Boolean = false, isSelectable: Boolean = true) {
    F("FN", isCommand = true, isSelectable = false),
    LCTL("Left Control", isCommand = true, isSelectable = false),
    RCTL("Right Control", isCommand = true, isSelectable = false),
    LALT("Left Alt", isCommand = true, isSelectable = false),
    RALT("Right Alt", isCommand = true, isSelectable = false),
    LSHFT("Left Shift", isCommand = true, isSelectable = false),
    RSHFT("Right Shift", isCommand = true, isSelectable = false),

    KC_TRNS(""),
    KC_NO("", isSelectable = false),
    KC_A("A"),
    KC_B("B"),
    KC_C("C"),
    KC_D("D"),
    KC_E("E"),
    KC_F("F"),
    KC_G("G"),
    KC_H("H"),
    KC_I("I"),
    KC_J("J"),
    KC_K("K"),
    KC_L("L"),
    KC_M("M"),
    KC_N("N"),
    KC_O("P"),
    KC_P("P"),
    KC_Q("Q"),
    KC_R("R"),
    KC_S("S"),
    KC_T("T"),
    KC_U("U"),
    KC_V("V"),
    KC_W("W"),
    KC_X("X"),
    KC_Y("Y"),
    KC_Z("Z"),
    KC_1("1"),
    KC_2("2"),
    KC_3("3"),
    KC_4("4"),
    KC_5("5"),
    KC_6("6"),
    KC_7("7"),
    KC_8("8"),
    KC_9("9"),
    KC_0("0"),
    KC_ENTER("Enter"),
    KC_ESCAPE("Escape"),
    KC_GESC("Grv/Escape"),
    KC_BSPACE("Backspace"),
    KC_TAB("Tab"),
    KC_SPACE("Space"),
    KC_MINUS("-"),
    KC_EQUAL("="),
    KC_LBRACKET("["),
    KC_RBRACKET("]"),
    KC_BSLASH("\\"),          /* \ (and |) */
    KC_NONUS_HASH("Non-US #"),      /* Non-US # and ~ (Typically near the Enter key) */
    KC_NONUS_BSLASH("Non-US \\"),    /* Non-US \ and | (Typically near the Left-Shift key) */
    KC_SCOLON(";", group = KeyCodeGroup.Puncuation),          /* ; (and :) */
    KC_SCLN(";"),
    KC_QUOTE("'"),           /* ' and " */
    KC_GRAVE("`"),           /* Grave accent and tilde */
    KC_COMMA(","),           /* , and < */
    KC_DOT("."),             /* . and > */
    KC_SLASH("/"),           /* / and ? */
    KC_CAPSLOCK("Capslock"),
    KC_F1("F1"),
    KC_F2("F2"),
    KC_F3("F3"),
    KC_F4("F4"),
    KC_F5("F5"),
    KC_F6("F6"),
    KC_F7("F7"),
    KC_F8("F8"),
    KC_F9("F9"),
    KC_F10("F10"),
    KC_F11("F11"),
    KC_F12("F12"),
    KC_F13("F13"),
    KC_F14("F14"),
    KC_F15("F15"),
    KC_F16("F16"),
    KC_F17("F17"),
    KC_F18("F18"),
    KC_F19("F19"),
    KC_F20("F20"),
    KC_F21("F21"),
    KC_F22("F22"),
    KC_F23("F23"),
    KC_F24("F24"),
    KC_PSCREEN("PrtScrn"),
    KC_SCROLLLOCK("ScrLock"),
    KC_PAUSE("Pause"),
    KC_INSERT("Insert"),
    KC_HOME("Home"),
    KC_PGUP("Page Up"),
    KC_DELETE("Delete"),
    KC_END("End"),
    KC_PGDOWN("Page down"),
    KC_RIGHT("Right"),
    KC_LEFT("Left"),
    KC_DOWN("Down"),
    KC_UP("Up"),
    KC_NUMLOCK("Numlock"),
    KC_APPLICATION("App"),
    KC_POWER("Power"),
    KC_EXECUTE("Execute"),
    KC_HELP("Help"),
    KC_MENU("Menu"),
    KC_SELECT("Select"),
    KC_STOP("Stop"),
    KC_AGAIN("Again"),
    KC_UNDO("Undo"),
    KC_CUT("Cut"),
    KC_COPY("Copy"),
    KC_PASTE("Paste"),
    KC_FIND("Find"),
    KC__MUTE("Mute"),
    KC__VOLUP("Vol +"),
    KC__VOLDOWN("Vol -"),
    KC_LOCKING_CAPS("Locking Caps"),
    KC_LOCKING_NUM("Locking Num"),
    KC_LOCKING_SCROLL("Locking Scroll"),
    KC_SYSREQ("SysRq"),
    KC_RETURN("Return"),

    /* Modifiers */
    KC_LCTRL("Left Ctrl"),
    KC_LSHIFT("Left Shift"),
    KC_LALT("Left Alt"),
    KC_LGUI("Left GUI"),
    KC_RCTRL("Right Ctrl"),
    KC_RSHIFT("Right Shift"),
    KC_RALT("Right Alt"),
    KC_RGUI("Right GUI"),

    KC_SYSTEM_POWER("System Power"),
    KC_SYSTEM_SLEEP("System Sleep"),
    KC_SYSTEM_WAKE("System Wake"),

    /* Media Control */
    KC_AUDIO_MUTE("Mute"),
    KC_AUDIO_VOL_UP("Vol +"),
    KC_AUDIO_VOL_DOWN("Vol -"),
    KC_MEDIA_NEXT_TRACK("Next track"),
    KC_MEDIA_PREV_TRACK("Prev track"),
    KC_MEDIA_STOP("Stop"),
    KC_MEDIA_PLAY_PAUSE("Play/Pause"),
    KC_MEDIA_SELECT("Select"),
    KC_MEDIA_EJECT("Eject"),
    KC_MAIL("Mail"),
    KC_CALCULATOR("Calculator"),
    KC_MY_COMPUTER("My Computer"),
    KC_WWW_SEARCH("Search"),
    KC_WWW_HOME("WWW Home"),
    KC_WWW_BACK("WWW Back"),
    KC_WWW_FORWARD("WWW Forward"),
    KC_WWW_STOP("WWW Stop"),
    KC_WWW_REFRESH("WWW Refresh"),
    KC_WWW_FAVORITES("WWW Favorites"),
    KC_MEDIA_FAST_FORWARD("Fast Fwd"),
    KC_MEDIA_REWIND("Rewind"),

    /* Mousekey */
    KC_MS_UP("Mouse Up"),
    KC_MS_DOWN("Mouse Down"),
    KC_MS_LEFT("Mouse Left"),
    KC_MS_RIGHT("Mouse Right"),
    KC_MS_BTN1("Mouse Button 1"),
    KC_MS_BTN2("Mouse Button 2"),
    KC_MS_BTN3("Mouse Button 3"),
    KC_MS_BTN4("Mouse Button 4"),
    KC_MS_BTN5("Mouse Button 5"),

    /* Mousekey wheel */
    KC_MS_WH_UP("Mouse Wheel Up"),
    KC_MS_WH_DOWN("Mouse Wheel Down"),
    KC_MS_WH_LEFT("Mouse Wheel Left"),
    KC_MS_WH_RIGHT("Mouse Wheel Right"),

    /* Mousekey accel */
    KC_MS_ACCEL0("Mouse Accel 0"),
    KC_MS_ACCEL1("Mouse Accel 1"),
    KC_MS_ACCEL2("Mouse Accel 2");
}

object KeyCodeConverter : StringConverter<KeyCode>() {
    override fun fromString(string: String?) = null
    override fun toString(code: KeyCode?) = code?.description
}